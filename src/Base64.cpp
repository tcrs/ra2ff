/*
 * Part of the Red Alert 2 File Format Tools.
 * Copyright (C) 2008 Thomas Spurden <thomasspurden@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "Base64.h"
#include "Exception.h"
#include "Utils.h"

void Base64::initialiseTable() {
	static bool initialised = false;
	if(initialised) {
		return;
	}
	DEBUG("Intialising Base64 table");
	for(unsigned int i = 0; i != 64; i++) {
		lookup[alphabet[i]] = i;
	}
	lookup['='] = 0;
	initialised = true;
}

unsigned int Base64::decode64Chunk(uint8_t const* in, uint8_t* out) {
	unsigned int bytes = 3;
	uint32_t accum = 0;
	uint8_t sixbits;
	bool padCheck = false;
	for(unsigned int i = 0; i != 4; i++) {
		if(in[i] == '=') {
			bytes--;
			padCheck = true;
		} else if(padCheck) {
			throw EXCEPTION("Padding is incorrect, character 0x%02X follows '='", in[i]);
		}
		sixbits = lookup[in[i]];
		if(sixbits & 0xC0) {
			throw EXCEPTION("Invalid Base64 character 0x%02X (%c) detected in input, decodes to 0x%02X", in[i], in[i], sixbits);
		}
		accum <<= 6;
		accum |= sixbits;
	}
	if(bytes == 0 || bytes > 3) {
		throw EXCEPTION("Corrupted Base64 encoded data - seems to be more than 2 trailing padding '='");
	}
	out[0] = (accum & 0x00FF0000) >> 16;
	if(bytes > 1) {
		out[1] = (accum & 0x0000FF00) >> 8;
		if(bytes > 2) {
			out[2] = (accum & 0x000000FF);
		}
	}
	return bytes;
}

size_t Base64::decode(uint8_t const* in, uint8_t* out, size_t len) {
	initialiseTable();
	uint8_t const* b64Pos = in;
	uint8_t* decPos = out;
	unsigned int num;
	if(len % 4 != 0) {
		throw EXCEPTION("Base64 encoded data must be a multiple of 4 bytes long, this buffer is %u long", len);
	}
	while(b64Pos != in + len) {
		num = decode64Chunk(b64Pos, decPos);
		b64Pos += 4;
		decPos += 3;
	}
	return decPos - out - (3 - num);
}

uint8_t* Base64::decode(INIFile& ini, size_t& len) {
	std::string b64;
	for(unsigned int key = 1; ini.keyExists(Utils::toString(key)); key++) {
		b64 += ini.getKey(Utils::toString(key));
	}
	if(b64.length() % 4) {
		throw EXCEPTION("Data from INI file is not a multiple of 4 bytes long (is %u long)", b64.length());
	}
	uint8_t* buf = new uint8_t[(b64.length() / 4) * 3];
	len = decode(reinterpret_cast<uint8_t const*>(b64.c_str()), buf, b64.length());
	return buf;
}

uint8_t Base64::alphabet[64] = {
	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
	'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
	'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/',
};

uint8_t Base64::lookup[256] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
